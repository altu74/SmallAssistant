// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallAssistant.DBModels;

namespace MigrationGeneration.Migrations
{
    [DbContext(typeof(SmallAssistantDBContext))]
    partial class SmallAssistantDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("SmallAssistant.DBModels.Meter", b =>
                {
                    b.Property<int>("MeterId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MeterName")
                        .IsRequired();

                    b.Property<string>("MeterNumber");

                    b.HasKey("MeterId");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("SmallAssistant.DBModels.MeterRate", b =>
                {
                    b.Property<int>("MeterRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActiveFrom");

                    b.Property<int>("MeterId");

                    b.Property<int>("RateId");

                    b.HasKey("MeterRateId");

                    b.HasIndex("MeterId");

                    b.HasIndex("RateId");

                    b.ToTable("MeterRates");
                });

            modelBuilder.Entity("SmallAssistant.DBModels.MeterValue", b =>
                {
                    b.Property<int>("MeterValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("MeterDate");

                    b.Property<int>("MeterId");

                    b.Property<decimal>("Value");

                    b.HasKey("MeterValueId");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterValues");
                });

            modelBuilder.Entity("SmallAssistant.DBModels.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RateName")
                        .IsRequired();

                    b.Property<int>("RateTypeId");

                    b.HasKey("RateId");

                    b.HasIndex("RateTypeId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("SmallAssistant.DBModels.RateType", b =>
                {
                    b.Property<int>("RateTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RateTypeName")
                        .IsRequired();

                    b.HasKey("RateTypeId");

                    b.ToTable("RateTypes");
                });

            modelBuilder.Entity("SmallAssistant.DBModels.RateValue", b =>
                {
                    b.Property<int>("RateId");

                    b.Property<DateTime>("ActiveFrom");

                    b.Property<bool>("IsActive");

                    b.Property<decimal?>("MeterValueFrom");

                    b.Property<decimal?>("MeterValueTo");

                    b.Property<int>("RateValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan?>("TimeFrom");

                    b.Property<TimeSpan?>("TimeTo");

                    b.Property<decimal>("Value");

                    b.HasKey("RateId");

                    b.HasAlternateKey("RateValueId");

                    b.ToTable("RateValues");
                });

            modelBuilder.Entity("SmallAssistant.DBModels.MeterRate", b =>
                {
                    b.HasOne("SmallAssistant.DBModels.Meter", "Meter")
                        .WithMany("MeterRates")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmallAssistant.DBModels.Rate", "Rate")
                        .WithMany("MeterRates")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmallAssistant.DBModels.MeterValue", b =>
                {
                    b.HasOne("SmallAssistant.DBModels.Meter", "Meter")
                        .WithMany("MeterValues")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmallAssistant.DBModels.Rate", b =>
                {
                    b.HasOne("SmallAssistant.DBModels.RateType", "RateType")
                        .WithMany("Rates")
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmallAssistant.DBModels.RateValue", b =>
                {
                    b.HasOne("SmallAssistant.DBModels.Rate", "Rate")
                        .WithMany("RateValues")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
